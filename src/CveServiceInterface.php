<?php
/**
 * Part of the Joomla Framework CVE Package
 *
 * @copyright  Copyright (C) 2021 Open Source Matters, Inc. All rights reserved.
 * @license    GNU General Public License version 2 or later; see LICENSE
 */

/**
 * @see https://github.com/CVEProject/cve-services/wiki/Developer-Guide-to-CVE-Services-API
 * @see https://github.com/CVEProject/cve-services/blob/dev/docs/openapi.yml
 */

namespace Joomla\Cve;

/**
 * Interface CveServiceInterface
 *
 * @since  __DEPLOY_VERSION__
 */
interface CveServiceInterface
{
    /**
     * Allows an Org to see details about their id_quota.
     *
     * @return  CveQuota  Details of the organization's id_quota
     */
    public function getQuota(): CveQuota;

    /**
     * Retrieve a CVE ID by ID, can be a CVE the entity doesn't own if in a PUBLIC or REJECT state.
     *
     * @param   string  $id  The actual CVE ID (CVE-YYYY-XXX).
     *
     * @return  CveId
     */
    public function getId(string $id): CveId;

    /**
     * Retrieve all CVE IDs entity owns.
     *
     * @param   CveFilter|null  $filter  A filter to apply to the request
     *
     * @return  array
     */
    public function getIds(?CveFilter $filter): array;

    /**
     * Reserve a single priority ID for the organisation.
     *
     * In a gesture to encourage the community to reserve IDs on demand, IDR has a feature for those that request one ID
     * and do not specify a batch_type. This is a "priority" ID which is the range 1-20k. These IDs go out lowest to
     * highest. If the range is taken, IDR will transition as if the client had asked for a batch_type of sequential
     * and return what is essentially the lowest ID available for that year. Please use this feature responsibly.
     *
     * @param   int|null  $year  The year the IDs should be reserved for. [1999...current+1]
     *
     * @return  CveId
     */
    public function reservePriorityId(?int $year): CveId;

    /**
     * Reserve a batch of sequential IDs for the organisation.
     *
     * This method of reservation is the traditional method everyone is accustomed to. It is recommended that if the
     * goal is to reserve a large amount of IDs immediately in a single HTTP request to use the sequential batch_type.
     * The CVE Project currently does not limit how many sequential IDs can be asked for, so the organization's ID quota
     * is essentially the limit. Upwards of 1k IDs have been asked for and response times are right under 2s.
     *
     * However, the CVE Project still encourages CNAs, if they can, to not reserve large amounts to have those IDs sit
     * since IDR can reserve new IDs at any time. A more proper use of sequential batch_type's is to reserve a sequence
     * of CVE IDs in order to publish a group of related CVEs.
     *
     * @param   int       $amount  Amount of IDs desired
     * @param   int|null  $year    The year the IDs should be reserved for. [1999...current+1]
     *
     * @return  array
     */
    public function reserveSequentialIds(int $amount, ?int $year): array;

    /**
     * Reserve a batch of non-sequential IDs for the organisation.
     *
     * This is a new method of reservation coming with IDR. IDR chooses IDs to reserve at random, so the array of
     * CVE IDs returned are assorted across a range. Due to the random selection, this request takes longer to process.
     * There's currently a limit of 10 on the amount one can request in one HTTP request as response times for 10
     * non-sequential IDs fall in the 1.7s range. If more than 10 non-sequential IDs are needed, the CVE Project
     * recommends simply making another request for more non-sequential IDs, as there is no limit to how many requests
     * users or organizations as a whole can make against the IDR. Please do note that these requests should be made
     * sequentially, as any concurrent requests risk receiving a 403 with { error: "RESERVATION_IN_PROGRESS" } and a
     * message field containing additional explanation text. This is in order to avoid a long running reservation
     * request causing an organization to exceed their id quota by having other smaller requests process concurrently
     * before the longer request completes its reservations.
     *
     * There is the most minute chance that IDR has approached the end of the range it is set to allocate (somewhere
     * around 50M per year for most years) but it has not done so at the start of a non-sequential request. But due to
     * the asynchronous nature of REST APIs, multiple other non-sequential requests could be depleting the pool to the
     * point that the pool can not be replenished and IDR can no longer reserve the amount it thought it could to
     * fulfill the request. Due to the nature of non-sequential, that request would have made transactions to reserve
     * some of those IDs. To be clear, this scenario should never happen. If IDR even comes close to approaching the
     * ends of its ranges for any year, the Secretariat should update that range to allow IDR to continue running for
     * that year. That being said, if IDR is in this bind, a 206 status code will be returned in order to indicate that
     * not all the IDs were reserved with a JSON response containing various details and the successfully reserved
     * CVE IDs.
     *
     * @param   int       $amount  Amount of IDs desired
     * @param   int|null  $year    The year the IDs should be reserved for. [1999...current+1]
     *
     * @return array
     */
    public function reserveNonSequentialIds(int $amount, ?int $year): array;

    /**
     * Get the last error
     *
     * @return array
     */
    public function getLastError(): array;
}

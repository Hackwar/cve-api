<?php

/**
 * Part of the Joomla Framework CVE Package
 *
 * @copyright  Copyright (C) 2021 Open Source Matters, Inc. All rights reserved.
 * @license    GNU General Public License version 2 or later; see LICENSE
 */

namespace Joomla\Cve;

/**
 * Class CveFilter
 *
 * @since  __DEPLOY_VERSION__
 */
class CveFilter
{
    /** @var string[] The filter values */
    private $params;

    /**
     * Filter by CVE state, one of CveId::RESERVED, CveId::PUBLIC or CveId::REJECT
     *
     * @param   string|null  $state  Optional. If omitted or null, the filter value is cleared.
     *
     * @return  $this
     */
    public function state(?string $state = null): self
    {
        $this->params['state'] = $state;

        return $this;
    }

    /**
     * Filter by the year in the CVE ID (YYYY)
     *
     * @param   int|null  $year  Optional. If omitted or null, the filter value is cleared.
     *
     * @return  $this
     */
    public function year(?int $year = null): self
    {
        $this->params['cve_id_year'] = $year;

        return $this;
    }

    /**
     * Get all CVE IDs reserved before timestamp
     *
     * @param   \DateTime|null  $date  Optional. If omitted or null, the filter value is cleared.
     *
     * @return  $this
     */
    public function reservedBefore(?\DateTime $date = null): self
    {
        if ($date === null) {
            $this->params['time_reserved.lt'] = null;
        } else {
            $this->params['time_reserved.lt'] = $date->format('Y-m-d\TH:i:s');
        }

        return $this;
    }

    /**
     * Get all CVE IDs reserved after timestamp
     *
     * @param   \DateTime|null  $date  Optional. If omitted or null, the filter value is cleared.
     *
     * @return  $this
     */
    public function reservedAfter(?\DateTime $date = null): self
    {
        if ($date === null) {
            $this->params['time_reserved.gt'] = null;
        } else {
            $this->params['time_reserved.gt'] = $date->format('Y-m-d\TH:i:s');
        }

        return $this;
    }

    /**
     * Get the filter value as query string
     *
     * @return  string  A query string suitable for an HTTP request based on the filter values
     */
    public function __toString(): string
    {
        return http_build_query(array_filter($this->params));
    }
}

<?php
/**
 * Part of the Joomla Framework CVE Package
 *
 * @copyright  Copyright (C) 2021 Open Source Matters, Inc. All rights reserved.
 * @license    GNU General Public License version 2 or later; see LICENSE
 */

namespace Joomla\Cve;

use Psr\Http\Client\ClientInterface;

/**
 * Class CveService
 *
 * @since  __DEPLOY_VERSION__
 */
final class CveService implements CveServiceInterface
{
	/**
	 * CveService constructor.
	 *
	 * @param   ClientInterface  $client  The HTTP client to use for communication.
	 * @param   string           $user    The username for the account that is making the request.
	 * @param   string           $org     The shortname for the entity (e.g., CNA, ADP) that is authenticated or requesting authentication.
	 * @param   string           $key     The user's api key.
	 */
	public function __construct(ClientInterface $client, string $user, string $org, string $key)
	{
		throw new \LogicException('Not yet implemented');
	}

	/**
	 * Allows an Org to see details about their id_quota.
	 *
	 * @return  CveQuota  Details of the organization's id_quota
	 */
	public function getQuota(): CveQuota
	{
		return new CveQuota([
			'id_quota'       => 0,
			'total_reserved' => 0,
			'available'      => 0,
			]
		);
	}

	/**
	 * Retrieve a CVE ID by ID, can be a CVE the entity doesn't own if in a PUBLIC or REJECT state.
	 *
	 * @param   string  $id  The actual CVE ID (CVE-YYYY-XXXX).
	 *
	 * @return  CveId
	 */
	public function getId(string $id): CveId
	{
		return new CveId([
			'requested_by' => [
				'cna'  => '',
				"user" => '',
			],
			"cve_id"       => '',
			"cve_year"     => '',
			"state"        => '',
			"owning_cna"   => '',
			"reserved"     => '',
			]
		);
	}

	/**
	 * Retrieve all CVE IDs entity owns.
	 *
	 * @param   CveFilter|null  $filter  A filter to apply to the request
	 *
	 * @return  array
	 */
	public function getIds(?CveFilter $filter): array
	{
		return [];
	}

	/**
	 * Reserve a single priority ID for the organisation.
	 *
	 * @param   int|null  $year  The year the IDs should be reserved for. [1999...current+1]
	 *
	 * @return  CveId
	 */
	public function reservePriorityId(?int $year): CveId
	{
		return new CveId([
				'requested_by' => [
					'cna'  => '',
					"user" => '',
				],
				"cve_id"       => '',
				"cve_year"     => '',
				"state"        => '',
				"owning_cna"   => '',
				"reserved"     => '',
			]
		);
	}

	/**
	 * Reserve a batch of sequential IDs for the organisation.
	 *
	 * @param   int       $amount  Amount of IDs desired
	 * @param   int|null  $year    The year the IDs should be reserved for. [1999...current+1]
	 *
	 * @return  array
	 */
	public function reserveSequentialIds(int $amount, ?int $year): array
	{
		return [];
	}

	/**
	 * Reserve a batch of non-sequential IDs for the organisation.
	 *
	 * @param   int       $amount  Amount of IDs desired
	 * @param   int|null  $year    The  year the IDs should be reserved for. [1999...current+1]
	 *
	 * @return  array
	 */
	public function reserveNonSequentialIds(int $amount, ?int $year): array
	{
		return [];
	}

	/**
	 * Get the last error
	 *
	 * @return  array
	 */
	public function getLastError(): array
	{
		return [];
	}
}

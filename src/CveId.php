<?php
/**
 * Part of the Joomla Framework CVE Package
 *
 * @copyright  Copyright (C) 2021 Open Source Matters, Inc. All rights reserved.
 * @license    GNU General Public License version 2 or later; see LICENSE
 */

namespace Joomla\Cve;

/**
 * Class CveId
 *
 * @since  __DEPLOY_VERSION__
 */
final class CveId // Immutable value object, see JSON return object
{
	public const RESERVED = 'RESERVED';
	public const PUBLIC   = 'PUBLIC';
	public const REJECT   = 'REJECT';

	/** @var array The CVE ID */
	private $id;

	/**
	 * CveId constructor.
	 *
	 * Format:
	 * {
	 *     "requested_by": {
	 *         "cna": "education",
	 *         "user": "angelaclark@education.com"
	 *     },
	 *     "cve_id": "CVE-2021-0023",
	 *     "cve_year": "2021",
	 *     "state": "RESERVED",
	 *     "owning_cna": "education",
	 *     "reserved": "2020-11-13T19:37:34.854Z"
	 * }
	 *
	 * @param   array  $id  An array representing the CVE ID, usually the JSON decoded response from the CVE Service
	 */
	public function __construct(array $id)
	{
		$requestedBy          = $this->getIdValue($id, 'requested_by');
		$this->id['cna']      = $this->getIdValue($requestedBy, 'cna');
		$this->id['user']     = $this->getIdValue($requestedBy, 'user');
		$this->id['id']       = $this->getIdValue($id, 'cve_id');
		$this->id['year']     = $this->getIdValue($id, 'cve_year');
		$this->id['state']    = $this->getIdValue($id, 'state');
		$this->id['owner']    = $this->getIdValue($id, 'owning_cna');
		$this->id['reserved'] = $this->getIdValue($id, 'reserved');
	}

	/**
	 * Get the shortname for the organization of the user that requested the ID.
	 *
	 * @return  string
	 */
	public function requestingCna(): string
	{
		return $this->id['cna'];
	}

	/**
	 * Get the username for the account that requested the ID.
	 *
	 * @return  string
	 */
	public function requestingUser(): string
	{
		return $this->id['user'];
	}

	/**
	 * Get the actual CVE ID.
	 *
	 * @return  string
	 */
	public function cveId(): string
	{
		return $this->id['id'];
	}

	/**
	 * Get the year in the CVE ID
	 *
	 * @return  integer
	 */
	public function cveYear(): int
	{
		return (int) $this->id['year'];
	}

	/**
	 * Get the state, one of CveId::RESERVED, CveId::PUBLIC or CveId::REJECT.
	 *
	 * @return  string
	 */
	public function state(): string
	{
		return $this->id['state'];
	}

	/**
	 * Get the shortname for the organisation that owns the CVE-ID.
	 *
	 * @return  string
	 */
	public function owningCna(): string
	{
		return $this->id['owner'];
	}

	/**
	 * Get the time the ID was reserved.
	 *
	 * @return  \DateTime
	 * @throws  \Exception
	 */
	public function reservedAt(): \DateTime
	{
		return new \DateTime($this->id['reserved'], new \DateTimeZone('UTC'));
	}

	/**
	 * Get the actual CVE ID as the default string representation of this CveId.
	 *
	 * @return  string
	 */
	public function __toString(): string
	{
		return (string) $this->id['id'];
	}

	/**
	 * Get a value from an array with check for existence
	 *
	 * @param   array   $array  The array (hash) containing the value
	 * @param   string  $index  The index (key) of the value
	 *
	 * @return  mixed  The value
	 * @throws  \UnexpectedValueException if index is missing.
	 */
	private function getIdValue(array $array, string $index)
	{
		if (!array_key_exists($index, $array))
		{
			throw new \UnexpectedValueException('Not a valid CVE ID, missing field ' . $index);
		}

		return $array[$index];
	}
}

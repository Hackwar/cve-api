<?php
/**
 * Part of the Joomla Framework CVE Package
 *
 * @copyright  Copyright (C) 2021 Open Source Matters, Inc. All rights reserved.
 * @license    GNU General Public License version 2 or later; see LICENSE
 */

namespace Joomla\Cve\Tests;

use Joomla\Cve\CveFilter;
use Joomla\Cve\CveId;
use Joomla\Cve\CveService;
use Joomla\Http\Exception\UnexpectedResponseException;
use Joomla\Registry\Registry;
use PHPUnit\Framework\TestCase;

class CveServiceTest extends TestCase
{
    /**
     * @var CveService
     */
    private $cveService;

    /**
     * Setup common environment
     */
    public function setUp(): void
    {
        $options = new Registry([
            'api' => [
                'org'      => 'education',
                'username' => 'angelaclark@education.com',
                'key'      => 'TCF25YM-39C4H6D-KA32EGF-V5XSHN3',
                'url'      => 'http://localhost:3000/api',
            ],
        ]);

        $this->cveService = new CveService($options);
    }

    public function testDefaultUrl(): void
    {
        $cve = new CveService();

        self::assertSame('https://cveawg.mitre.org/api', $cve->getOption('api.url'));
    }

    public function testQuota(): void
    {
        $quota = $this->cveService->getQuota();
        $error = $this->cveService->getLastError();

        self::assertEquals('', $error['error']);
        self::assertEquals(1000, $quota->quota());
        self::assertEquals(1000 - $quota->reserved(), $quota->available());
    }

    public function testGetId(): void
    {
        $id    = $this->cveService->getId('CVE-1999-1000');
        $error = $this->cveService->getLastError();

        self::assertEquals('', $error['error']);
        self::assertEquals('CVE-1999-1000', $id->cveId());
        self::assertEquals(1999, $id->cveYear());
        self::assertEquals(CveId::PUBLIC, $id->state());
        self::assertEquals('place', $id->owningCna());
    }

    public function testGetInvalidId(): void
    {
        $this->expectException(UnexpectedResponseException::class);

        /** @noinspection PhpUnusedLocalVariableInspection */
        $id    = $this->cveService->getId('CVE-1777-0704');
        $error = $this->cveService->getLastError();

        self::assertEquals('', $error['error']);
    }

    /**
     * The org 'education' has 1064 (> 1000) IDs in a fresh test db.
     * The number increases with each test run, so an exact match is not useful.
     */
    public function testGetIdsWithoutFilter(): void
    {
        $ids   = $this->cveService->getIds();
        $error = $this->cveService->getLastError();

        self::assertEquals('', $error['error']);
        self::assertIsArray($ids);
        self::assertGreaterThan(1000, $ids);
        self::assertInstanceOf(CveId::class, reset($ids));
    }

    /**
     * Provide examples of valid filter values
     *
     * @return array[]
     * @throws \Exception
     */
    public function validFilterValues(): array
    {
        $timezone = new \DateTimeZone('UTC');

        return [
            [CveId::RESERVED, 2019, null, null, 18],
            [
                null,
                null,
                new \DateTime('2019-01-01 00:00:00', $timezone),
                new \DateTime('2019-12-31 23:59:59', $timezone),
                96,
            ],
        ];
    }

    /**
     * @param $state
     * @param $year
     * @param $after
     * @param $before
     * @param $expected
     *
     * @dataProvider validFilterValues
     */
    public function testGetIdsWithFilter($state, $year, $after, $before, $expected): void
    {
        $filter = new CveFilter();

        if ($state !== null) {
            $filter->state($state);
        }
        if ($year !== null) {
            $filter->year($year);
        }
        if ($after !== null) {
            $filter->reservedAfter($after);
        }
        if ($before !== null) {
            $filter->reservedBefore($before);
        }

        $ids   = $this->cveService->getIds($filter);
        $error = $this->cveService->getLastError();

        self::assertEquals('', $error['error']);
        self::assertCount($expected, $ids);
    }

    public function testReservePriorityId(): void
    {
        $current  = date('Y');
        $expected = 'CVE-' . ($current + 1) . '-';

        $id    = $this->cveService->reservePriorityId();
        $error = $this->cveService->getLastError();

        self::assertEquals('', $error['error']);
        self::assertStringStartsWith($expected, $id->cveId());
    }

    public function testReservePriorityIdWithYear(): void
    {
        $id    = $this->cveService->reservePriorityId(2000);
        $error = $this->cveService->getLastError();

        self::assertEquals('', $error['error']);
        self::assertStringStartsWith('CVE-2000-', $id->cveId());
    }

    public function testReserveSequentialIds(): void
    {
        $current = date('Y');
        $prefix  = 'CVE-' . ($current + 1) . '-';

        $ids   = $this->cveService->reserveSequentialIds(3);
        $error = $this->cveService->getLastError();

        self::assertEquals('', $error['error']);

        $numbers = [];

        self::assertCount(3, $ids, 'Expected 3 IDs');

        foreach ($ids as $id) {
            self::assertStringStartsWith($prefix, $id->cveId());
            $numbers[] = (int) str_replace($prefix, '', $id->cveId());
        }

        $base = reset($numbers);

        self::assertEquals([$base, $base + 1, $base + 2], $numbers);
    }

    public function testReserveNonSequentialIds(): void
    {
        $ids   = $this->cveService->reserveNonSequentialIds(10);
        $error = $this->cveService->getLastError();

        if (count($ids) !== 10) {
            self::assertEquals('206', $error['error']);
        } else {
            self::assertEquals('', $error['error']);
        }
    }
}
